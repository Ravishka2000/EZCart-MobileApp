{"ast":null,"code":"'use strict';","map":{"version":3,"names":[],"sources":["D:/SPM/EZCart-MobileApp/node_modules/react-native/Libraries/Components/View/ViewPropTypes.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nimport type {EdgeInsetsOrSizeProp} from '../../StyleSheet/EdgeInsetsPropType';\nimport type {ViewStyleProp} from '../../StyleSheet/StyleSheet';\nimport type {\n  BlurEvent,\n  FocusEvent,\n  Layout,\n  LayoutEvent,\n  MouseEvent,\n  PointerEvent,\n  PressEvent,\n} from '../../Types/CoreEventTypes';\nimport type {\n  AccessibilityActionEvent,\n  AccessibilityActionInfo,\n  AccessibilityRole,\n  AccessibilityState,\n  AccessibilityValue,\n  Role,\n} from './ViewAccessibility';\nimport type {Node} from 'react';\n\nexport type ViewLayout = Layout;\nexport type ViewLayoutEvent = LayoutEvent;\n\ntype DirectEventProps = $ReadOnly<{|\n  /**\n   * When `accessible` is true, the system will try to invoke this function\n   * when the user performs an accessibility custom action.\n   *\n   */\n  onAccessibilityAction?: ?(event: AccessibilityActionEvent) => mixed,\n\n  /**\n   * When `accessible` is true, the system will try to invoke this function\n   * when the user performs accessibility tap gesture.\n   *\n   * See https://reactnative.dev/docs/view#onaccessibilitytap\n   */\n  onAccessibilityTap?: ?() => mixed,\n\n  /**\n   * Invoked on mount and layout changes with:\n   *\n   * `{nativeEvent: { layout: {x, y, width, height}}}`\n   *\n   * This event is fired immediately once the layout has been calculated, but\n   * the new layout may not yet be reflected on the screen at the time the\n   * event is received, especially if a layout animation is in progress.\n   *\n   * See https://reactnative.dev/docs/view#onlayout\n   */\n  onLayout?: ?(event: LayoutEvent) => mixed,\n\n  /**\n   * When `accessible` is `true`, the system will invoke this function when the\n   * user performs the magic tap gesture.\n   *\n   * See https://reactnative.dev/docs/view#onmagictap\n   */\n  onMagicTap?: ?() => mixed,\n\n  /**\n   * When `accessible` is `true`, the system will invoke this function when the\n   * user performs the escape gesture.\n   *\n   * See https://reactnative.dev/docs/view#onaccessibilityescape\n   */\n  onAccessibilityEscape?: ?() => mixed,\n|}>;\n\ntype MouseEventProps = $ReadOnly<{|\n  onMouseEnter?: ?(event: MouseEvent) => void,\n  onMouseLeave?: ?(event: MouseEvent) => void,\n|}>;\n\n// Experimental/Work in Progress Pointer Event Callbacks (not yet ready for use)\ntype PointerEventProps = $ReadOnly<{|\n  onPointerEnter?: ?(event: PointerEvent) => void,\n  onPointerEnterCapture?: ?(event: PointerEvent) => void,\n  onPointerLeave?: ?(event: PointerEvent) => void,\n  onPointerLeaveCapture?: ?(event: PointerEvent) => void,\n  onPointerMove?: ?(event: PointerEvent) => void,\n  onPointerMoveCapture?: ?(event: PointerEvent) => void,\n  onPointerCancel?: ?(e: PointerEvent) => void,\n  onPointerCancelCapture?: ?(e: PointerEvent) => void,\n  onPointerDown?: ?(e: PointerEvent) => void,\n  onPointerDownCapture?: ?(e: PointerEvent) => void,\n  onPointerUp?: ?(e: PointerEvent) => void,\n  onPointerUpCapture?: ?(e: PointerEvent) => void,\n  onPointerOver?: ?(e: PointerEvent) => void,\n  onPointerOverCapture?: ?(e: PointerEvent) => void,\n  onPointerOut?: ?(e: PointerEvent) => void,\n  onPointerOutCapture?: ?(e: PointerEvent) => void,\n|}>;\n\ntype FocusEventProps = $ReadOnly<{|\n  onBlur?: ?(event: BlurEvent) => void,\n  onBlurCapture?: ?(event: BlurEvent) => void,\n  onFocus?: ?(event: FocusEvent) => void,\n  onFocusCapture?: ?(event: FocusEvent) => void,\n|}>;\n\ntype TouchEventProps = $ReadOnly<{|\n  onTouchCancel?: ?(e: PressEvent) => void,\n  onTouchCancelCapture?: ?(e: PressEvent) => void,\n  onTouchEnd?: ?(e: PressEvent) => void,\n  onTouchEndCapture?: ?(e: PressEvent) => void,\n  onTouchMove?: ?(e: PressEvent) => void,\n  onTouchMoveCapture?: ?(e: PressEvent) => void,\n  onTouchStart?: ?(e: PressEvent) => void,\n  onTouchStartCapture?: ?(e: PressEvent) => void,\n|}>;\n\n/**\n * For most touch interactions, you'll simply want to wrap your component in\n * `TouchableHighlight` or `TouchableOpacity`. Check out `Touchable.js`,\n * `ScrollResponder.js` and `ResponderEventPlugin.js` for more discussion.\n */\ntype GestureResponderEventProps = $ReadOnly<{|\n  /**\n   * Does this view want to \"claim\" touch responsiveness? This is called for\n   * every touch move on the `View` when it is not the responder.\n   *\n   * `View.props.onMoveShouldSetResponder: (event) => [true | false]`, where\n   * `event` is a synthetic touch event as described above.\n   *\n   * See https://reactnative.dev/docs/view#onmoveshouldsetresponder\n   */\n  onMoveShouldSetResponder?: ?(e: PressEvent) => boolean,\n\n  /**\n   * If a parent `View` wants to prevent a child `View` from becoming responder\n   * on a move, it should have this handler which returns `true`.\n   *\n   * `View.props.onMoveShouldSetResponderCapture: (event) => [true | false]`,\n   * where `event` is a synthetic touch event as described above.\n   *\n   * See https://reactnative.dev/docs/view#onMoveShouldsetrespondercapture\n   */\n  onMoveShouldSetResponderCapture?: ?(e: PressEvent) => boolean,\n\n  /**\n   * The View is now responding for touch events. This is the time to highlight\n   * and show the user what is happening.\n   *\n   * `View.props.onResponderGrant: (event) => {}`, where `event` is a synthetic\n   * touch event as described above.\n   *\n   * PanResponder includes a note `// TODO: t7467124 investigate if this can be removed` that\n   * should help fixing this return type.\n   *\n   * See https://reactnative.dev/docs/view#onrespondergrant\n   */\n  onResponderGrant?: ?(e: PressEvent) => void | boolean,\n\n  /**\n   * The user is moving their finger.\n   *\n   * `View.props.onResponderMove: (event) => {}`, where `event` is a synthetic\n   * touch event as described above.\n   *\n   * See https://reactnative.dev/docs/view#onrespondermove\n   */\n  onResponderMove?: ?(e: PressEvent) => void,\n\n  /**\n   * Another responder is already active and will not release it to that `View`\n   * asking to be the responder.\n   *\n   * `View.props.onResponderReject: (event) => {}`, where `event` is a\n   * synthetic touch event as described above.\n   *\n   * See https://reactnative.dev/docs/view#onresponderreject\n   */\n  onResponderReject?: ?(e: PressEvent) => void,\n\n  /**\n   * Fired at the end of the touch.\n   *\n   * `View.props.onResponderRelease: (event) => {}`, where `event` is a\n   * synthetic touch event as described above.\n   *\n   * See https://reactnative.dev/docs/view#onresponderrelease\n   */\n  onResponderRelease?: ?(e: PressEvent) => void,\n\n  onResponderStart?: ?(e: PressEvent) => void,\n  onResponderEnd?: ?(e: PressEvent) => void,\n\n  /**\n   * The responder has been taken from the `View`. Might be taken by other\n   * views after a call to `onResponderTerminationRequest`, or might be taken\n   * by the OS without asking (e.g., happens with control center/ notification\n   * center on iOS)\n   *\n   * `View.props.onResponderTerminate: (event) => {}`, where `event` is a\n   * synthetic touch event as described above.\n   *\n   * See https://reactnative.dev/docs/view#onresponderterminate\n   */\n  onResponderTerminate?: ?(e: PressEvent) => void,\n\n  /**\n   * Some other `View` wants to become responder and is asking this `View` to\n   * release its responder. Returning `true` allows its release.\n   *\n   * `View.props.onResponderTerminationRequest: (event) => {}`, where `event`\n   * is a synthetic touch event as described above.\n   *\n   * See https://reactnative.dev/docs/view#onresponderterminationrequest\n   */\n  onResponderTerminationRequest?: ?(e: PressEvent) => boolean,\n\n  /**\n   * Does this view want to become responder on the start of a touch?\n   *\n   * `View.props.onStartShouldSetResponder: (event) => [true | false]`, where\n   * `event` is a synthetic touch event as described above.\n   *\n   * See https://reactnative.dev/docs/view#onstartshouldsetresponder\n   */\n  onStartShouldSetResponder?: ?(e: PressEvent) => boolean,\n\n  /**\n   * If a parent `View` wants to prevent a child `View` from becoming responder\n   * on a touch start, it should have this handler which returns `true`.\n   *\n   * `View.props.onStartShouldSetResponderCapture: (event) => [true | false]`,\n   * where `event` is a synthetic touch event as described above.\n   *\n   * See https://reactnative.dev/docs/view#onstartshouldsetrespondercapture\n   */\n  onStartShouldSetResponderCapture?: ?(e: PressEvent) => boolean,\n|}>;\n\ntype AndroidDrawableThemeAttr = $ReadOnly<{|\n  type: 'ThemeAttrAndroid',\n  attribute: string,\n|}>;\n\ntype AndroidDrawableRipple = $ReadOnly<{|\n  type: 'RippleAndroid',\n  color?: ?number,\n  borderless?: ?boolean,\n  rippleRadius?: ?number,\n|}>;\n\ntype AndroidDrawable = AndroidDrawableThemeAttr | AndroidDrawableRipple;\n\ntype AndroidViewProps = $ReadOnly<{|\n  nativeBackgroundAndroid?: ?AndroidDrawable,\n  nativeForegroundAndroid?: ?AndroidDrawable,\n\n  /**\n   * Whether this `View` should render itself (and all of its children) into a\n   * single hardware texture on the GPU.\n   *\n   * @platform android\n   *\n   * See https://reactnative.dev/docs/view#rendertohardwaretextureandroid\n   */\n  renderToHardwareTextureAndroid?: ?boolean,\n\n  /**\n   * Whether this `View` needs to rendered offscreen and composited with an\n   * alpha in order to preserve 100% correct colors and blending behavior.\n   *\n   * @platform android\n   *\n   * See https://reactnative.dev/docs/view#needsoffscreenalphacompositing\n   */\n  needsOffscreenAlphaCompositing?: ?boolean,\n\n  /**\n   * Indicates to accessibility services whether the user should be notified\n   * when this view changes. Works for Android API >= 19 only.\n   *\n   * @platform android\n   *\n   * See https://reactnative.dev/docs/view#accessibilityliveregion\n   */\n  accessibilityLiveRegion?: ?('none' | 'polite' | 'assertive'),\n\n  /**\n   * Indicates to accessibility services whether the user should be notified\n   * when this view changes. Works for Android API >= 19 only.\n   *\n   * @platform android\n   *\n   * See https://reactnative.dev/docs/view#accessibilityliveregion\n   */\n  'aria-live'?: ?('polite' | 'assertive' | 'off'),\n\n  /**\n   * Controls how view is important for accessibility which is if it\n   * fires accessibility events and if it is reported to accessibility services\n   * that query the screen. Works for Android only.\n   *\n   * @platform android\n   *\n   * See https://reactnative.dev/docs/view#importantforaccessibility\n   */\n  importantForAccessibility?: ?('auto' | 'yes' | 'no' | 'no-hide-descendants'),\n\n  /**\n   * Whether to force the Android TV focus engine to move focus to this view.\n   *\n   * @platform android\n   */\n  hasTVPreferredFocus?: ?boolean,\n\n  /**\n   * TV next focus down (see documentation for the View component).\n   *\n   * @platform android\n   */\n  nextFocusDown?: ?number,\n\n  /**\n   * TV next focus forward (see documentation for the View component).\n   *\n   * @platform android\n   */\n  nextFocusForward?: ?number,\n\n  /**\n   * TV next focus left (see documentation for the View component).\n   *\n   * @platform android\n   */\n  nextFocusLeft?: ?number,\n\n  /**\n   * TV next focus right (see documentation for the View component).\n   *\n   * @platform android\n   */\n  nextFocusRight?: ?number,\n\n  /**\n   * TV next focus up (see documentation for the View component).\n   *\n   * @platform android\n   */\n  nextFocusUp?: ?number,\n\n  /**\n   * Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.\n   *\n   * @platform android\n   */\n  focusable?: boolean,\n\n  /**\n   * Indicates whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard.\n   * See https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex\n   * for more details.\n   *\n   * Supports the following values:\n   * -  0 (View is focusable)\n   * - -1 (View is not focusable)\n   *\n   * @platform android\n   */\n  tabIndex?: 0 | -1,\n\n  /**\n   * The action to perform when this `View` is clicked on by a non-touch click, eg. enter key on a hardware keyboard.\n   *\n   * @platform android\n   */\n  onClick?: ?(event: PressEvent) => mixed,\n|}>;\n\ntype IOSViewProps = $ReadOnly<{|\n  /**\n   * Prevents view from being inverted if set to true and color inversion is turned on.\n   *\n   * @platform ios\n   */\n  accessibilityIgnoresInvertColors?: ?boolean,\n\n  /**\n   * A value indicating whether VoiceOver should ignore the elements\n   * within views that are siblings of the receiver.\n   * Default is `false`.\n   *\n   * @platform ios\n   *\n   * See https://reactnative.dev/docs/view#accessibilityviewismodal\n   */\n  accessibilityViewIsModal?: ?boolean,\n\n  /**\n   * The aria-modal attribute indicates content contained within a modal with aria-modal=\"true\"\n   * should be accessible to the user.\n   * Default is `false`.\n   *\n   *  @platform ios\n   */\n  'aria-modal'?: ?boolean,\n\n  /**\n   * A value indicating whether the accessibility elements contained within\n   * this accessibility element are hidden.\n   *\n   * @platform ios\n   *\n   * See https://reactnative.dev/docs/view#accessibilityElementsHidden\n   */\n  accessibilityElementsHidden?: ?boolean,\n\n  /**\n   * Whether this `View` should be rendered as a bitmap before compositing.\n   *\n   * @platform ios\n   *\n   * See https://reactnative.dev/docs/view#shouldrasterizeios\n   */\n  shouldRasterizeIOS?: ?boolean,\n|}>;\n\nexport type ViewProps = $ReadOnly<{|\n  ...DirectEventProps,\n  ...GestureResponderEventProps,\n  ...MouseEventProps,\n  ...PointerEventProps,\n  ...FocusEventProps,\n  ...TouchEventProps,\n  ...AndroidViewProps,\n  ...IOSViewProps,\n\n  children?: Node,\n  style?: ?ViewStyleProp,\n\n  /**\n   * When `true`, indicates that the view is an accessibility element.\n   * By default, all the touchable elements are accessible.\n   *\n   * See https://reactnative.dev/docs/view#accessible\n   */\n  accessible?: ?boolean,\n\n  /**\n   * Overrides the text that's read by the screen reader when the user interacts\n   * with the element. By default, the label is constructed by traversing all\n   * the children and accumulating all the `Text` nodes separated by space.\n   *\n   * See https://reactnative.dev/docs/view#accessibilitylabel\n   */\n  accessibilityLabel?: ?Stringish,\n\n  /**\n   * An accessibility hint helps users understand what will happen when they perform\n   * an action on the accessibility element when that result is not obvious from the\n   * accessibility label.\n   *\n   *\n   * See https://reactnative.dev/docs/view#accessibilityHint\n   */\n  accessibilityHint?: ?Stringish,\n\n  /**\n   * Alias for accessibilityLabel  https://reactnative.dev/docs/view#accessibilitylabel\n   * https://github.com/facebook/react-native/issues/34424\n   */\n  'aria-label'?: ?Stringish,\n\n  /**\n   * Indicates to the accessibility services that the UI component is in\n   * a specific language. The provided string should be formatted following\n   * the BCP 47 specification (https://www.rfc-editor.org/info/bcp47).\n   *\n   * @platform ios\n   */\n  accessibilityLanguage?: ?Stringish,\n\n  /**\n   * Indicates to accessibility services to treat UI component like a specific role.\n   */\n  accessibilityRole?: ?AccessibilityRole,\n\n  /**\n   * Alias for accessibilityRole\n   */\n  role?: ?Role,\n\n  /**\n   * Indicates to accessibility services that UI Component is in a specific State.\n   */\n  accessibilityState?: ?AccessibilityState,\n  accessibilityValue?: ?AccessibilityValue,\n\n  /**\n   * alias for accessibilityState\n   * It represents textual description of a component's value, or for range-based components, such as sliders and progress bars.\n   */\n  'aria-valuemax'?: ?AccessibilityValue['max'],\n  'aria-valuemin'?: ?AccessibilityValue['min'],\n  'aria-valuenow'?: ?AccessibilityValue['now'],\n  'aria-valuetext'?: ?AccessibilityValue['text'],\n\n  /**\n   * Provides an array of custom actions available for accessibility.\n   *\n   */\n  accessibilityActions?: ?$ReadOnlyArray<AccessibilityActionInfo>,\n\n  /**\n   * Specifies the nativeID of the associated label text. When the assistive technology focuses on the component with this props, the text is read aloud.\n   *\n   * @platform android\n   */\n  accessibilityLabelledBy?: ?string | ?Array<string>,\n\n  /**\n   * alias for accessibilityState\n   *\n   * see https://reactnative.dev/docs/accessibility#accessibilitystate\n   */\n  'aria-busy'?: ?boolean,\n  'aria-checked'?: ?boolean | 'mixed',\n  'aria-disabled'?: ?boolean,\n  'aria-expanded'?: ?boolean,\n  'aria-selected'?: ?boolean,\n  /** A value indicating whether the accessibility elements contained within\n   * this accessibility element are hidden.\n   *\n   * See https://reactnative.dev/docs/view#aria-hidden\n   */\n  'aria-hidden'?: ?boolean,\n\n  /**\n   * It represents the nativeID of the associated label text. When the assistive technology focuses on the component with this props, the text is read aloud.\n   *\n   * @platform android\n   */\n  'aria-labelledby'?: ?string,\n\n  /**\n   * Views that are only used to layout their children or otherwise don't draw\n   * anything may be automatically removed from the native hierarchy as an\n   * optimization. Set this property to `false` to disable this optimization and\n   * ensure that this `View` exists in the native view hierarchy.\n   *\n   * @platform android\n   * In Fabric, this prop is used in ios as well.\n   *\n   * See https://reactnative.dev/docs/view#collapsable\n   */\n  collapsable?: ?boolean,\n\n  /**\n   * Used to locate this view from native classes.\n   *\n   * > This disables the 'layout-only view removal' optimization for this view!\n   *\n   * See https://reactnative.dev/docs/view#id\n   */\n  id?: string,\n\n  /**\n   * Used to locate this view in end-to-end tests.\n   *\n   * > This disables the 'layout-only view removal' optimization for this view!\n   *\n   * See https://reactnative.dev/docs/view#testid\n   */\n  testID?: ?string,\n\n  /**\n   * Used to locate this view from native classes.\n   *\n   * > This disables the 'layout-only view removal' optimization for this view!\n   *\n   * See https://reactnative.dev/docs/view#nativeid\n   */\n  nativeID?: ?string,\n\n  /**\n   * This defines how far a touch event can start away from the view.\n   * Typical interface guidelines recommend touch targets that are at least\n   * 30 - 40 points/density-independent pixels.\n   *\n   * > The touch area never extends past the parent view bounds and the Z-index\n   * > of sibling views always takes precedence if a touch hits two overlapping\n   * > views.\n   *\n   * See https://reactnative.dev/docs/view#hitslop\n   */\n  hitSlop?: ?EdgeInsetsOrSizeProp,\n\n  /**\n   * Controls whether the `View` can be the target of touch events.\n   *\n   * See https://reactnative.dev/docs/view#pointerevents\n   */\n  pointerEvents?: ?('auto' | 'box-none' | 'box-only' | 'none'),\n\n  /**\n   * This is a special performance property exposed by `RCTView` and is useful\n   * for scrolling content when there are many subviews, most of which are\n   * offscreen. For this property to be effective, it must be applied to a\n   * view that contains many subviews that extend outside its bound. The\n   * subviews must also have `overflow: hidden`, as should the containing view\n   * (or one of its superviews).\n   *\n   * See https://reactnative.dev/docs/view#removeclippedsubviews\n   */\n  removeClippedSubviews?: ?boolean,\n|}>;\n"],"mappings":"AAUA,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}